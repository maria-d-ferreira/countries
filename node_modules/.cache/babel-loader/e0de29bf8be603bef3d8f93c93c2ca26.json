{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useFetch = url => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const fetchCountries = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(url);\n      const countries = await response.json();\n\n      if (countries) {\n        const countryData = data.map(info => {\n          const {\n            alpha3Code,\n            capital,\n            flags,\n            name,\n            region,\n            population,\n            languages,\n            borders\n          } = info;\n          return {\n            countryCode: alpha3Code,\n            capital,\n            flags,\n            name,\n            region,\n            population,\n            languages,\n            borders\n          };\n        });\n        setData(countryData);\n        console.log(countryData);\n      } else {\n        setData([]);\n        setLoading(false);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setError(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n  return {\n    data,\n    error,\n    loading\n  };\n};\n\n_s(useFetch, \"XZWjG1OnQ6Ua1idhbgSy1MLuhmc=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","data","setData","error","setError","loading","setLoading","fetchCountries","response","fetch","countries","json","countryData","map","info","alpha3Code","capital","flags","name","region","population","languages","borders","countryCode","console","log"],"sources":["C:/Users/Cristina/Desktop/boiler/src/hooks/useFetch.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (url: string) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchCountries = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(url);\r\n      const countries = await response.json();\r\n      if (countries) {\r\n        const countryData = data.map((info: any) => {\r\n          const {\r\n            alpha3Code,\r\n            capital,\r\n            flags,\r\n            name,\r\n            region,\r\n            population,\r\n            languages,\r\n            borders,\r\n          } = info;\r\n\r\n          return {\r\n            countryCode: alpha3Code,\r\n            capital,\r\n            flags,\r\n            name,\r\n            region,\r\n            population,\r\n            languages,\r\n            borders,\r\n          };\r\n        });\r\n        setData(countryData);\r\n        console.log(countryData);\r\n      } else {\r\n        setData([]);\r\n        setLoading(false);\r\n      }\r\n      setLoading(false);\r\n    } catch (error: any) {\r\n      setLoading(false);\r\n      setError(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  return { data, error, loading };\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAiB;EAAA;;EACvC,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;EACA,MAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;;EAEA,MAAMU,cAAc,GAAG,YAAY;IACjC,IAAI;MACFD,UAAU,CAAC,IAAD,CAAV;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;MACA,MAAMU,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;;MACA,IAAID,SAAJ,EAAe;QACb,MAAME,WAAW,GAAGX,IAAI,CAACY,GAAL,CAAUC,IAAD,IAAe;UAC1C,MAAM;YACJC,UADI;YAEJC,OAFI;YAGJC,KAHI;YAIJC,IAJI;YAKJC,MALI;YAMJC,UANI;YAOJC,SAPI;YAQJC;UARI,IASFR,IATJ;UAWA,OAAO;YACLS,WAAW,EAAER,UADR;YAELC,OAFK;YAGLC,KAHK;YAILC,IAJK;YAKLC,MALK;YAMLC,UANK;YAOLC,SAPK;YAQLC;UARK,CAAP;QAUD,CAtBmB,CAApB;QAuBApB,OAAO,CAACU,WAAD,CAAP;QACAY,OAAO,CAACC,GAAR,CAAYb,WAAZ;MACD,CA1BD,MA0BO;QACLV,OAAO,CAAC,EAAD,CAAP;QACAI,UAAU,CAAC,KAAD,CAAV;MACD;;MACDA,UAAU,CAAC,KAAD,CAAV;IACD,CAnCD,CAmCE,OAAOH,KAAP,EAAmB;MACnBG,UAAU,CAAC,KAAD,CAAV;MACAF,QAAQ,CAACD,KAAD,CAAR;IACD;EACF,CAxCD;;EA0CAL,SAAS,CAAC,MAAM;IACdS,cAAc;EACf,CAFQ,EAEN,EAFM,CAAT;EAIA,OAAO;IAAEN,IAAF;IAAQE,KAAR;IAAeE;EAAf,CAAP;AACD,CApDM;;GAAMN,Q"},"metadata":{},"sourceType":"module"}