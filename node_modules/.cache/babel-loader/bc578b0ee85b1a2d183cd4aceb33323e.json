{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristina\\\\Desktop\\\\countries\\\\src\\\\components\\\\Countries.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { store } from \"../store/store\";\nimport Country from \"./Country\";\nimport \"../css/Countries.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Countries = props => {\n  _s();\n\n  const countries = store.getState().countries.countries;\n  const countryList = countries.filter(country => country.region === props.region); // the value of the search field\n\n  const [name, setName] = useState(\"\"); // the search result\n\n  const [foundCountries, setFoundCountries] = useState(countryList);\n\n  const filter = e => {\n    const keyword = e.target.value;\n\n    if (keyword !== \"\") {\n      const results = countryList.filter(country => {\n        return country.name.toLowerCase().startsWith(keyword.toLowerCase()); // Use the toLowerCase() method to make it case-insensitive\n      });\n      setFoundCountries(results);\n    } else {\n      setFoundCountries(countryList); // If the text field is empty, show all users\n    }\n\n    setName(keyword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        value: name,\n        onChange: filter,\n        className: \"input\",\n        placeholder: \"Search for a country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: foundCountries && foundCountries.length > 0 ? foundCountries.map(country => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"countries-section\",\n        children: /*#__PURE__*/_jsxDEV(Country, {\n          country: country,\n          fav: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)\n      }, country.countryCode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"No countries found!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Countries, \"BcLSF/XYC+yS9jl/u7r9xZ/hdxM=\");\n\n_c = Countries;\nexport default Countries;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","store","Country","Countries","props","countries","getState","countryList","filter","country","region","name","setName","foundCountries","setFoundCountries","e","keyword","target","value","results","toLowerCase","startsWith","length","map","countryCode"],"sources":["C:/Users/Cristina/Desktop/countries/src/components/Countries.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { store } from \"../store/store\";\r\nimport Country from \"./Country\";\r\nimport \"../css/Countries.css\";\r\n\r\ninterface Props {\r\n  region: string;\r\n}\r\n\r\nconst Countries: React.FC<Props> = props => {\r\n  const countries = store.getState().countries.countries;\r\n  const countryList = countries.filter(\r\n    country => country.region === props.region\r\n  );\r\n\r\n  // the value of the search field\r\n  const [name, setName] = useState(\"\");\r\n\r\n  // the search result\r\n  const [foundCountries, setFoundCountries] = useState(countryList);\r\n\r\n  const filter = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const keyword = (e.target as HTMLInputElement).value;\r\n\r\n    if (keyword !== \"\") {\r\n      const results = countryList.filter(country => {\r\n        return country.name.toLowerCase().startsWith(keyword.toLowerCase());\r\n        // Use the toLowerCase() method to make it case-insensitive\r\n      });\r\n      setFoundCountries(results);\r\n    } else {\r\n      setFoundCountries(countryList);\r\n      // If the text field is empty, show all users\r\n    }\r\n\r\n    setName(keyword);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"container\">\r\n        <input\r\n          type=\"search\"\r\n          value={name}\r\n          onChange={filter}\r\n          className=\"input\"\r\n          placeholder=\"Search for a country\"\r\n        />\r\n\r\n        <div className=\"\"></div>\r\n      </div>\r\n\r\n      {\r\n        <div>\r\n          {foundCountries && foundCountries.length > 0 ? (\r\n            foundCountries.map(country => (\r\n              <li key={country.countryCode} className=\"countries-section\">\r\n                <Country country={country} fav=\"add\" />\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <h1>No countries found!</h1>\r\n          )}\r\n        </div>\r\n      }\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,sBAAP;;;AAMA,MAAMC,SAA0B,GAAGC,KAAK,IAAI;EAAA;;EAC1C,MAAMC,SAAS,GAAGJ,KAAK,CAACK,QAAN,GAAiBD,SAAjB,CAA2BA,SAA7C;EACA,MAAME,WAAW,GAAGF,SAAS,CAACG,MAAV,CAClBC,OAAO,IAAIA,OAAO,CAACC,MAAR,KAAmBN,KAAK,CAACM,MADlB,CAApB,CAF0C,CAM1C;;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC,CAP0C,CAS1C;;EACA,MAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAACO,WAAD,CAApD;;EAEA,MAAMC,MAAM,GAAIO,CAAD,IAA0C;IACvD,MAAMC,OAAO,GAAID,CAAC,CAACE,MAAH,CAA+BC,KAA/C;;IAEA,IAAIF,OAAO,KAAK,EAAhB,EAAoB;MAClB,MAAMG,OAAO,GAAGZ,WAAW,CAACC,MAAZ,CAAmBC,OAAO,IAAI;QAC5C,OAAOA,OAAO,CAACE,IAAR,CAAaS,WAAb,GAA2BC,UAA3B,CAAsCL,OAAO,CAACI,WAAR,EAAtC,CAAP,CAD4C,CAE5C;MACD,CAHe,CAAhB;MAIAN,iBAAiB,CAACK,OAAD,CAAjB;IACD,CAND,MAMO;MACLL,iBAAiB,CAACP,WAAD,CAAjB,CADK,CAEL;IACD;;IAEDK,OAAO,CAACI,OAAD,CAAP;EACD,CAfD;;EAiBA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,WAAf;MAAA,wBACE;QACE,IAAI,EAAC,QADP;QAEE,KAAK,EAAEL,IAFT;QAGE,QAAQ,EAAEH,MAHZ;QAIE,SAAS,EAAC,OAJZ;QAKE,WAAW,EAAC;MALd;QAAA;QAAA;QAAA;MAAA,QADF,eASE;QAAK,SAAS,EAAC;MAAf;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAcI;MAAA,UACGK,cAAc,IAAIA,cAAc,CAACS,MAAf,GAAwB,CAA1C,GACCT,cAAc,CAACU,GAAf,CAAmBd,OAAO,iBACxB;QAA8B,SAAS,EAAC,mBAAxC;QAAA,uBACE,QAAC,OAAD;UAAS,OAAO,EAAEA,OAAlB;UAA2B,GAAG,EAAC;QAA/B;UAAA;UAAA;UAAA;QAAA;MADF,GAASA,OAAO,CAACe,WAAjB;QAAA;QAAA;QAAA;MAAA,QADF,CADD,gBAOC;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IARJ;MAAA;MAAA;MAAA;IAAA,QAdJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BD,CA1DD;;GAAMrB,S;;KAAAA,S;AA4DN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}