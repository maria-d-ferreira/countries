{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cristina\\\\Desktop\\\\boiler\\\\src\\\\components\\\\Countries.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { store } from \"../store/store\";\nimport \"./Countries.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USERS = [{\n  id: 1,\n  name: \"Andy\"\n}, {\n  id: 2,\n  name: \"Bob\"\n}, {\n  id: 3,\n  name: \"Tom Hulk\"\n}, {\n  id: 4,\n  name: \"Tom Hank\"\n}, {\n  id: 5,\n  name: \"Audra\"\n}, {\n  id: 6,\n  name: \"Anna\"\n}, {\n  id: 7,\n  name: \"Tom\"\n}, {\n  id: 8,\n  name: \"Tom Riddle\"\n}, {\n  id: 9,\n  name: \"Bolo\"\n}];\n\nconst Countries = props => {\n  _s();\n\n  const countries = store.getState().countries.countries;\n  const countryList = countries.filter(country => country.region === props.region); // the value of the search field\n\n  const [name, setName] = useState(\"\"); // the search result\n\n  const [foundCountries, setFoundCountries] = useState(countryList);\n\n  const filter = e => {\n    const keyword = e.target.value;\n\n    if (keyword !== \"\") {\n      const results = countryList.filter(user => {\n        return user.name.toLowerCase().startsWith(keyword.toLowerCase()); // Use the toLowerCase() method to make it case-insensitive\n      });\n      setFoundCountries(results);\n    } else {\n      setFoundCountries(countryList); // If the text field is empty, show all users\n    }\n\n    setName(keyword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        value: name,\n        onChange: filter,\n        className: \"input\",\n        placeholder: \"Searh for a country\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Countries, \"BcLSF/XYC+yS9jl/u7r9xZ/hdxM=\");\n\n_c = Countries;\nexport default Countries;\n{\n  /* <div className=\"user-list\">\r\n  {foundUsers && foundUsers.length > 0 ? (\r\n  foundUsers.map(user => (\r\n    <li key={user.id} className=\"user\">\r\n      <span className=\"user-name\">{user.name}</span>\r\n    </li>\r\n  ))\r\n  ) : (\r\n  <h1>No results found!</h1>\r\n  )}\r\n  </div> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Countries\");","map":{"version":3,"names":["React","useState","store","USERS","id","name","Countries","props","countries","getState","countryList","filter","country","region","setName","foundCountries","setFoundCountries","e","keyword","target","value","results","user","toLowerCase","startsWith"],"sources":["C:/Users/Cristina/Desktop/boiler/src/components/Countries.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { store } from \"../store/store\";\r\nimport \"./Countries.css\";\r\n\r\nconst USERS = [\r\n  { id: 1, name: \"Andy\" },\r\n  { id: 2, name: \"Bob\" },\r\n  { id: 3, name: \"Tom Hulk\" },\r\n  { id: 4, name: \"Tom Hank\" },\r\n  { id: 5, name: \"Audra\" },\r\n  { id: 6, name: \"Anna\" },\r\n  { id: 7, name: \"Tom\" },\r\n  { id: 8, name: \"Tom Riddle\" },\r\n  { id: 9, name: \"Bolo\" },\r\n];\r\n\r\ninterface Props {\r\n  region: string;\r\n}\r\n\r\nconst Countries: React.FC<Props> = props => {\r\n  const countries = store.getState().countries.countries;\r\n  const countryList = countries.filter(\r\n    country => country.region === props.region\r\n  );\r\n\r\n  // the value of the search field\r\n  const [name, setName] = useState(\"\");\r\n\r\n  // the search result\r\n  const [foundCountries, setFoundCountries] = useState(countryList);\r\n\r\n  const filter = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const keyword = (e.target as HTMLInputElement).value;\r\n\r\n    if (keyword !== \"\") {\r\n      const results = countryList.filter(user => {\r\n        return user.name.toLowerCase().startsWith(keyword.toLowerCase());\r\n        // Use the toLowerCase() method to make it case-insensitive\r\n      });\r\n      setFoundCountries(results);\r\n    } else {\r\n      setFoundCountries(countryList);\r\n      // If the text field is empty, show all users\r\n    }\r\n\r\n    setName(keyword);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"container\">\r\n        <input\r\n          type=\"search\"\r\n          value={name}\r\n          onChange={filter}\r\n          className=\"input\"\r\n          placeholder=\"Searh for a country\"\r\n        />\r\n\r\n        <div className=\"user-list\"></div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n\r\n{\r\n  /* <div className=\"user-list\">\r\n{foundUsers && foundUsers.length > 0 ? (\r\n  foundUsers.map(user => (\r\n    <li key={user.id} className=\"user\">\r\n      <span className=\"user-name\">{user.name}</span>\r\n    </li>\r\n  ))\r\n) : (\r\n  <h1>No results found!</h1>\r\n)}\r\n</div> */\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,iBAAP;;AAEA,MAAMC,KAAK,GAAG,CACZ;EAAEC,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CADY,EAEZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CAFY,EAGZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CAHY,EAIZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CAJY,EAKZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CALY,EAMZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CANY,EAOZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CAPY,EAQZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CARY,EASZ;EAAED,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE;AAAf,CATY,CAAd;;AAgBA,MAAMC,SAA0B,GAAGC,KAAK,IAAI;EAAA;;EAC1C,MAAMC,SAAS,GAAGN,KAAK,CAACO,QAAN,GAAiBD,SAAjB,CAA2BA,SAA7C;EACA,MAAME,WAAW,GAAGF,SAAS,CAACG,MAAV,CAClBC,OAAO,IAAIA,OAAO,CAACC,MAAR,KAAmBN,KAAK,CAACM,MADlB,CAApB,CAF0C,CAM1C;;EACA,MAAM,CAACR,IAAD,EAAOS,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC,CAP0C,CAS1C;;EACA,MAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAACS,WAAD,CAApD;;EAEA,MAAMC,MAAM,GAAIM,CAAD,IAA0C;IACvD,MAAMC,OAAO,GAAID,CAAC,CAACE,MAAH,CAA+BC,KAA/C;;IAEA,IAAIF,OAAO,KAAK,EAAhB,EAAoB;MAClB,MAAMG,OAAO,GAAGX,WAAW,CAACC,MAAZ,CAAmBW,IAAI,IAAI;QACzC,OAAOA,IAAI,CAACjB,IAAL,CAAUkB,WAAV,GAAwBC,UAAxB,CAAmCN,OAAO,CAACK,WAAR,EAAnC,CAAP,CADyC,CAEzC;MACD,CAHe,CAAhB;MAIAP,iBAAiB,CAACK,OAAD,CAAjB;IACD,CAND,MAMO;MACLL,iBAAiB,CAACN,WAAD,CAAjB,CADK,CAEL;IACD;;IAEDI,OAAO,CAACI,OAAD,CAAP;EACD,CAfD;;EAiBA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,WAAf;MAAA,wBACE;QACE,IAAI,EAAC,QADP;QAEE,KAAK,EAAEb,IAFT;QAGE,QAAQ,EAAEM,MAHZ;QAIE,SAAS,EAAC,OAJZ;QAKE,WAAW,EAAC;MALd;QAAA;QAAA;QAAA;MAAA,QADF,eASE;QAAK,SAAS,EAAC;MAAf;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CA5CD;;GAAML,S;;KAAAA,S;AA8CN,eAAeA,SAAf;AAEA;EACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC"},"metadata":{},"sourceType":"module"}