{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useApiGet = url => {\n  _s();\n\n  const [status, setStatus] = useState(0);\n  const [statusText, setStatusText] = useState(\"\");\n  const [data, setData] = useState();\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const fetchtData = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(url);\n      const data = await response.json();\n\n      if (data) {\n        const countryData = data.map(info => {\n          const {\n            capital,\n            flags,\n            name,\n            region,\n            population,\n            launguages,\n            borders\n          } = info;\n          return {\n            capital,\n            flags,\n            name,\n            region,\n            population,\n            launguages,\n            borders,\n            favorite: false\n          };\n        });\n        setData(countryData); //const dataCopy = JSON.parse(JSON.stringify(countryData));\n\n        console.log(dataCopy);\n      }\n\n      setStatus(response.status);\n      setStatusText(response.statusText);\n    } catch (error) {\n      setError(error);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    fetchtData();\n  }, []);\n  return {\n    status,\n    statusText,\n    data,\n    error,\n    loading\n  };\n};\n\n_s(useApiGet, \"GIDrwDjs3qTQ55jp79O9NdWKGj8=\");","map":{"version":3,"names":["useState","useEffect","useApiGet","url","status","setStatus","statusText","setStatusText","data","setData","error","setError","loading","setLoading","fetchtData","response","fetch","json","countryData","map","info","capital","flags","name","region","population","launguages","borders","favorite","console","log","dataCopy"],"sources":["C:/Users/Cristina/Desktop/boiler/src/hooks/useApiHook.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport type TApiResponse = {\r\n  status: Number;\r\n  statusText: String;\r\n  data: any;\r\n  error: any;\r\n  loading: Boolean;\r\n};\r\n\r\nexport const useApiGet = (url: string): TApiResponse => {\r\n  const [status, setStatus] = useState<Number>(0);\r\n  const [statusText, setStatusText] = useState<String>(\"\");\r\n  const [data, setData] = useState<any>();\r\n  const [error, setError] = useState<any>();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const fetchtData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      if (data) {\r\n        const countryData = data.map((info: any) => {\r\n          const {\r\n            capital,\r\n            flags,\r\n            name,\r\n            region,\r\n            population,\r\n            launguages,\r\n            borders,\r\n          } = info;\r\n\r\n          return {\r\n            capital,\r\n            flags,\r\n            name,\r\n            region,\r\n            population,\r\n            launguages,\r\n            borders,\r\n            favorite: false,\r\n          };\r\n        });\r\n        setData(countryData);\r\n        //const dataCopy = JSON.parse(JSON.stringify(countryData));\r\n\r\n        console.log(dataCopy);\r\n      }\r\n\r\n      setStatus(response.status);\r\n      setStatusText(response.statusText);\r\n    } catch (error) {\r\n      setError(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchtData();\r\n  }, []);\r\n\r\n  return { status, statusText, data, error, loading };\r\n};\r\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAUA,OAAO,MAAMC,SAAS,GAAIC,GAAD,IAA+B;EAAA;;EACtD,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAS,CAAT,CAApC;EACA,MAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAS,EAAT,CAA5C;EACA,MAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,EAAhC;EACA,MAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,EAAlC;EACA,MAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAU,KAAV,CAAtC;;EAEA,MAAMc,UAAU,GAAG,YAAY;IAC7B,IAAI;MACFD,UAAU,CAAC,IAAD,CAAV;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACb,GAAD,CAA5B;MACA,MAAMK,IAAI,GAAG,MAAMO,QAAQ,CAACE,IAAT,EAAnB;;MACA,IAAIT,IAAJ,EAAU;QACR,MAAMU,WAAW,GAAGV,IAAI,CAACW,GAAL,CAAUC,IAAD,IAAe;UAC1C,MAAM;YACJC,OADI;YAEJC,KAFI;YAGJC,IAHI;YAIJC,MAJI;YAKJC,UALI;YAMJC,UANI;YAOJC;UAPI,IAQFP,IARJ;UAUA,OAAO;YACLC,OADK;YAELC,KAFK;YAGLC,IAHK;YAILC,MAJK;YAKLC,UALK;YAMLC,UANK;YAOLC,OAPK;YAQLC,QAAQ,EAAE;UARL,CAAP;QAUD,CArBmB,CAApB;QAsBAnB,OAAO,CAACS,WAAD,CAAP,CAvBQ,CAwBR;;QAEAW,OAAO,CAACC,GAAR,CAAYC,QAAZ;MACD;;MAED1B,SAAS,CAACU,QAAQ,CAACX,MAAV,CAAT;MACAG,aAAa,CAACQ,QAAQ,CAACT,UAAV,CAAb;IACD,CAnCD,CAmCE,OAAOI,KAAP,EAAc;MACdC,QAAQ,CAACD,KAAD,CAAR;IACD;;IACDG,UAAU,CAAC,KAAD,CAAV;EACD,CAxCD;;EA0CAZ,SAAS,CAAC,MAAM;IACda,UAAU;EACX,CAFQ,EAEN,EAFM,CAAT;EAIA,OAAO;IAAEV,MAAF;IAAUE,UAAV;IAAsBE,IAAtB;IAA4BE,KAA5B;IAAmCE;EAAnC,CAAP;AACD,CAtDM;;GAAMV,S"},"metadata":{},"sourceType":"module"}