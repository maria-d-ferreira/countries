[{"C:\\Users\\Cristina\\Desktop\\countries\\src\\index.tsx":"1","C:\\Users\\Cristina\\Desktop\\countries\\src\\App.tsx":"2","C:\\Users\\Cristina\\Desktop\\countries\\src\\store\\store.tsx":"3","C:\\Users\\Cristina\\Desktop\\countries\\src\\store\\countrySlice.tsx":"4","C:\\Users\\Cristina\\Desktop\\countries\\src\\hooks\\useFetch.ts":"5","C:\\Users\\Cristina\\Desktop\\countries\\src\\store\\favoriteSlice.tsx":"6","C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Favorites.tsx":"7","C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Header.tsx":"8","C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Sidebar.tsx":"9","C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Country.tsx":"10","C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Countries.tsx":"11","C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\FilterCountries.tsx":"12"},{"size":350,"mtime":1655465444733,"results":"13","hashOfConfig":"14"},{"size":1180,"mtime":1655830704863,"results":"15","hashOfConfig":"14"},{"size":564,"mtime":1655799214408,"results":"16","hashOfConfig":"14"},{"size":449,"mtime":1655594298930,"results":"17","hashOfConfig":"14"},{"size":1308,"mtime":1655566350408,"results":"18","hashOfConfig":"14"},{"size":852,"mtime":1655735803530,"results":"19","hashOfConfig":"14"},{"size":615,"mtime":1655898840648,"results":"20","hashOfConfig":"14"},{"size":1021,"mtime":1655894368237,"results":"21","hashOfConfig":"14"},{"size":1094,"mtime":1655744868542,"results":"22","hashOfConfig":"14"},{"size":2814,"mtime":1655821338638,"results":"23","hashOfConfig":"14"},{"size":587,"mtime":1655894939284,"results":"24","hashOfConfig":"14"},{"size":1752,"mtime":1655907124084,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"13i6z1p",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"29"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"29"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Cristina\\Desktop\\countries\\src\\index.tsx",[],[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\App.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\store\\store.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\store\\countrySlice.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\hooks\\useFetch.ts",["65"],[],"import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (url: string) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchCountries = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await fetch(url);\r\n      const countries = await response.json();\r\n      if (countries) {\r\n        const countryData = countries.map((info: any) => {\r\n          const {\r\n            alpha3Code,\r\n            name,\r\n            capital,\r\n            flags,\r\n            region,\r\n            population,\r\n            languages,\r\n            borders,\r\n            currencies,\r\n          } = info;\r\n\r\n          return {\r\n            countryCode: alpha3Code,\r\n            name,\r\n            capital,\r\n            flags,\r\n            region,\r\n            population,\r\n            languages,\r\n            borders,\r\n            currencies,\r\n          };\r\n        });\r\n        setData(countryData);\r\n      } else {\r\n        setData([]);\r\n        setLoading(false);\r\n      }\r\n      setLoading(false);\r\n    } catch (error: any) {\r\n      setLoading(false);\r\n      setError(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  return { data, loading, error };\r\n};\r\n","C:\\Users\\Cristina\\Desktop\\countries\\src\\store\\favoriteSlice.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Favorites.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Header.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Sidebar.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Country.tsx",["66"],[],"import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { AiTwotoneStar } from \"react-icons/ai\";\r\n\r\nimport { ICountry } from \"../types\";\r\nimport { addFav, removeFav } from \"../store/favoriteSlice\";\r\n\r\nimport \"../css/Country.css\";\r\n\r\ninterface Props {\r\n  country: ICountry;\r\n  fav: string;\r\n}\r\n\r\nconst Country: React.FC<Props> = props => {\r\n  const [showCountry, setShowCountry] = useState(false);\r\n  const {\r\n    countryCode,\r\n    name,\r\n    flags,\r\n    population,\r\n    region,\r\n    capital,\r\n    borders,\r\n    languages,\r\n    currencies,\r\n  } = props.country;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const favButton = props.fav === \"remove\" ? \"x\" : <AiTwotoneStar />;\r\n\r\n  const addFavHandler = () => {\r\n    if (props.fav === \"add\") {\r\n      dispatch(addFav(props.country));\r\n    } else {\r\n      dispatch(removeFav(props.country.countryCode));\r\n    }\r\n  };\r\n\r\n  const toggleShow = () => {\r\n    setShowCountry(prevShowCountry => !prevShowCountry);\r\n  };\r\n  return (\r\n    <div className=\"country\">\r\n      <div className=\"country-info\">\r\n        <div className=\"country-flag\">\r\n          <img src={flags.png} alt={name} />\r\n        </div>\r\n\r\n        <h3>{name}</h3>\r\n\r\n        <div>\r\n          <button onClick={addFavHandler}>{favButton}</button>\r\n        </div>\r\n        <button onClick={toggleShow}>\r\n          {!showCountry ? \"Show more\" : \"Hide\"}\r\n        </button>\r\n        {showCountry && (\r\n          <div>\r\n            <p>\r\n              Capital: <span>{capital}</span>\r\n            </p>\r\n\r\n            <p>\r\n              Population: <span>{population.toLocaleString(undefined)}</span>\r\n            </p>\r\n            <p>\r\n              Region: <span>{region}</span>\r\n            </p>\r\n\r\n            {languages && (\r\n              <div className=\"country-list\">\r\n                <p>Languages:</p>\r\n                <ul>\r\n                  {languages.map(language => (\r\n                    <li key={language.name}>{language.name}</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n\r\n            {borders && (\r\n              <div className=\"country-list\">\r\n                <p>Borders:</p>\r\n                <ul className=\"borders\">\r\n                  {borders.map(border => (\r\n                    <li key={border}>{border}</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n\r\n            {currencies && (\r\n              <div className=\"country-list\">\r\n                <p>Currencies:</p>\r\n                <ul>\r\n                  {currencies.map(currency => (\r\n                    <li key={currency.name}>{currency.name}</li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Country;\r\n","C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\Countries.tsx",[],[],"C:\\Users\\Cristina\\Desktop\\countries\\src\\components\\FilterCountries.tsx",[],[],{"ruleId":"67","severity":1,"message":"68","line":53,"column":6,"nodeType":"69","endLine":53,"endColumn":8,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":18,"column":5,"nodeType":"73","messageId":"74","endLine":18,"endColumn":16},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCountries'. Either include it or remove the dependency array.","ArrayExpression",["75"],"@typescript-eslint/no-unused-vars","'countryCode' is assigned a value but never used.","Identifier","unusedVar",{"desc":"76","fix":"77"},"Update the dependencies array to be: [fetchCountries]",{"range":"78","text":"79"},[1260,1262],"[fetchCountries]"]